// ==UserScript==
// @name         DS DexScreener Auto Refresh
// @namespace    http://tampermonkey.net/
// @version      1.3
// @description  Auto refresh DexScreener multicharts pages with longer intervals
// @author       Your name
// @match        https://dexscreener.com/multicharts/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

// 多页面自动重刷。重刷间隔 10分钟 + 随机间隔。
    // 创建状态指示器
    function createStatusIndicator() {
        const indicator = document.createElement('div');
        indicator.style.position = 'fixed';
        indicator.style.top = '10px';
        indicator.style.right = '40%'; // 移到更靠近中间的位置
        indicator.style.padding = '10px 15px';
        indicator.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
        indicator.style.color = '#00ff00'; // 绿色文字
        indicator.style.borderRadius = '8px';
        indicator.style.fontSize = '18px'; // 更大的字体
        indicator.style.fontWeight = '500';
        indicator.style.zIndex = '9999';
        indicator.style.fontFamily = 'Arial, sans-serif';
        indicator.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
        indicator.id = 'refresh-status';
        document.body.appendChild(indicator);
        return indicator;
    }

    // 更新状态显示
    function updateStatus(text) {
        let indicator = document.getElementById('refresh-status');
        if (!indicator) {
            indicator = createStatusIndicator();
        }
        indicator.textContent = text;
    }

    // 生成随机延迟（10分钟基准 ± 35-60秒的随机延迟）
    function getRandomDelay() {
        const baseDelay = 10 * 60 * 1000; // 10分钟
        const randomOffset = Math.floor(Math.random() * 25000) + 35000; // 35-60秒的随机延迟
        // 随机决定是加还是减
        return baseDelay + (Math.random() < 0.5 ? randomOffset : -randomOffset);
    }

    // 格式化时间显示
    function formatTime(ms) {
        const minutes = Math.floor(ms / 60000);
        const seconds = Math.floor((ms % 60000) / 1000);
        return `${minutes}分${seconds}秒`;
    }

    // 刷新页面
    function refreshPage() {
        try {
            // 更新状态显示
            updateStatus('正在刷新...');

            // 尝试关闭任何打开的弹窗
            try {
                if (window.confirm) {
                    window.confirm = function() { return true; };
                }
            } catch (e) {
                console.log('处理弹窗出错:', e);
            }

            // 延迟1秒后刷新，给状态显示时间
            setTimeout(() => {
                window.location.reload(true);
            }, 1000);

        } catch (e) {
            console.log('刷新出错:', e);
            updateStatus('刷新失败，5秒后重试');
            setTimeout(refreshPage, 5000);
        }
    }

    // 开始定时刷新
    function startAutoRefresh() {
        const delay = getRandomDelay();
        updateStatus(`下次刷新倒计时: ${formatTime(delay)}`);

        // 每秒更新倒计时显示
        let remainingTime = delay;
        const countdownInterval = setInterval(() => {
            remainingTime -= 1000;
            if (remainingTime > 0) {
                updateStatus(`下次刷新倒计时: ${formatTime(remainingTime)}`);
            } else {
                clearInterval(countdownInterval);
            }
        }, 1000);

        // 设置刷新
        setTimeout(() => {
            refreshPage();
        }, delay);
    }

    // 为新打开的页面生成一个随机初始延迟（0-35秒）
    function getInitialDelay() {
        return Math.floor(Math.random() * 35000); // 0-35秒的随机延迟
    }

    // 网页加载完成后开始运行，带初始随机延迟
    if (document.readyState === 'complete') {
        const initialDelay = getInitialDelay();
        updateStatus(`初始化中，将在${Math.floor(initialDelay/1000)}秒后开始第一次刷新循环`);
        setTimeout(startAutoRefresh, initialDelay);
    } else {
        window.addEventListener('load', () => {
            const initialDelay = getInitialDelay();
            updateStatus(`初始化中，将在${Math.floor(initialDelay/1000)}秒后开始第一次刷新循环`);
            setTimeout(startAutoRefresh, initialDelay);
        });
    }

    // 添加错误处理
    window.addEventListener('error', function(e) {
        console.log('捕获到错误:', e.error);
        updateStatus('发生错误，5秒后重试');
        setTimeout(refreshPage, 5000);
    });
})();
