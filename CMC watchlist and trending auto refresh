CMC watchlist 1h % 自动点击, CMC trending-cryptocurrencies 页面自动刷新,
功能说明：
自动刷新+点击：在  coinmarketcap.com/watchlist 页面上每隔900秒（15分钟）自动刷新页面，页面刷新后自动点击“1h %”按钮 一下。
倒计时显示：在页面上显示下次自动刷新的倒计时和已进行的操作次数。
页面自动刷新： CMC trending-cryptocurrencies 页面自动刷新, 每隔900秒（15分钟）
每次刷新会在15分钟的基础上增加0-3分钟的随机延迟。





// ==UserScript==
// @name         CMC watchlist and trending auto refresh
// @namespace    http://tampermonkey.net/
// @version      1.4
// @description  Auto refreshes CMC watchlist page (and clicks 1h%) and trending page every 15-18 minutes
// @match        https://coinmarketcap.com/watchlist/
// @match        https://coinmarketcap.com/trending-cryptocurrencies/
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    let countdownElements = {};
    let nextRefreshTime = {
        watchlist: 0,
        trending: 0
    };

    const BASE_INTERVAL = 900000; // 15 minutes
    const MAX_RANDOM_DELAY = 180000; // 3 minutes
    const MAX_RETRY_TIME = 10000; // 10 seconds maximum retry time
    const RETRY_INTERVAL = 500; // Check every 500ms

    // Get next refresh time with random delay
    function getNextRefreshTime() {
        const randomDelay = Math.floor(Math.random() * MAX_RANDOM_DELAY);
        return BASE_INTERVAL + randomDelay;
    }

    // Create countdown display
    function createCountdownDisplay(id, topOffset) {
        if (countdownElements[id]) return countdownElements[id];

        const display = document.createElement('div');
        display.style.position = 'fixed';
        display.style.top = `${topOffset}px`;
        display.style.right = '5%';
        display.style.padding = '10px 15px';
        display.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
        display.style.color = '#00ff00';
        display.style.borderRadius = '8px';
        display.style.fontSize = '16px';
        display.style.fontWeight = '500';
        display.style.zIndex = '9999';
        display.style.fontFamily = 'Arial, sans-serif';
        display.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';

        document.body.appendChild(display);
        countdownElements[id] = display;
        return display;
    }

    // Update countdown display
    function updateCountdown(id) {
        const display = createCountdownDisplay(id, id === 'watchlist' ? 55 : 55);
        const now = Date.now();
        const remainingTime = Math.max(0, nextRefreshTime[id] - now);
        const minutes = Math.floor(remainingTime / 60000);
        const seconds = Math.floor((remainingTime % 60000) / 1000);
        const pageName = id.charAt(0).toUpperCase() + id.slice(1);
        display.textContent = `${pageName} next refresh: ${minutes}m ${seconds}s`;
    }

    // Enhanced click 1h% button function with retry mechanism
    function click1hButton(startTime = Date.now()) {
        const elements = document.querySelectorAll('p.sc-71024e3e-0.llNEXf, div[data-text="1h %"]');
        let clicked = false;

        for (let element of elements) {
            if (element.textContent === '1h %') {
                element.click();
                console.log('Successfully clicked 1h% button');
                clicked = true;
                break;
            }
        }

        // If button not found and within retry time limit, try again
        if (!clicked && (Date.now() - startTime < MAX_RETRY_TIME)) {
            setTimeout(() => click1hButton(startTime), RETRY_INTERVAL);
        }
    }

    // Refresh watchlist page and click 1h%
    function refreshWatchlist() {
        // Wait for page to be interactive before trying to click
        if (document.readyState === 'complete') {
            click1hButton();
        } else {
            window.addEventListener('load', () => click1hButton());
        }

        const nextInterval = getNextRefreshTime();
        nextRefreshTime.watchlist = Date.now() + nextInterval;

        setTimeout(() => {
            if (location.href.includes('/watchlist')) {
                location.reload();
            }
        }, nextInterval);
    }

    // Refresh trending page
    function refreshTrending() {
        const nextInterval = getNextRefreshTime();
        nextRefreshTime.trending = Date.now() + nextInterval;

        setTimeout(() => {
            if (location.href.includes('/trending-cryptocurrencies')) {
                location.reload();
            }
        }, nextInterval);
    }

    // Initialize countdown timer
    function initializeTimer() {
        const currentPage = location.href;
        const isWatchlist = currentPage.includes('/watchlist');
        const isTrending = currentPage.includes('/trending-cryptocurrencies');

        // Set initial next refresh times
        if (isWatchlist) {
            nextRefreshTime.watchlist = Date.now() + getNextRefreshTime();
        }
        if (isTrending) {
            nextRefreshTime.trending = Date.now() + getNextRefreshTime();
        }

        // Update countdown every second
        setInterval(() => {
            if (isWatchlist) {
                updateCountdown('watchlist');
            }
            if (isTrending) {
                updateCountdown('trending');
            }
        }, 1000);
    }

    // Start the script
    function start() {
        // Initialize the countdown display
        initializeTimer();

        const currentPage = location.href;
        const isWatchlist = currentPage.includes('/watchlist');
        const isTrending = currentPage.includes('/trending-cryptocurrencies');

        if (isWatchlist) {
            // Add small delay before first click attempt
            setTimeout(() => click1hButton(), 1000);
            // Start the watchlist refresh cycle
            setTimeout(refreshWatchlist, getNextRefreshTime());
        }

        if (isTrending) {
            // Start the trending refresh cycle
            setTimeout(refreshTrending, getNextRefreshTime());
        }
    }

    // Start the script
    start();
})();
