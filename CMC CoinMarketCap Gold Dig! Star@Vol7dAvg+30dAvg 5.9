

5.9 精简合并版。 Star@Vol7dAvg+30dAvg , list page Expand 
4.9 最终版
30d 状态 可升可降， 


4.3  vol30d 数据出来了。marketcap 不对。sixtyday 不对。。。
行 3 处理后数据: {volume30d: 29222634, volume7d: 6017204, marketCap: 2.33, sixtyDay: {…}, thirtyDay: {…}, …}

行 40 原始数据: {volume30d: '$210,741,18372,965,844,401 BUBBLE', volume7d: '$45,489,86115,750,154,017 BUBBLE', marketCap: '$2.4M$2,402,876', thirtyDay: '7.99%', sevenDay: '3.71%', …}
行 40 处理后数据: {volume30d: 21074118372965843000, volume7d: 4548986115750154000, marketCap: 2400000, sixtyDay: {…}, thirtyDay: {…}, …}



-------------------------
行 40 原始数据: {volume30d: '$5,198,3787,629,960,754 MTV', volume7d: '$1,287,6401,889,944,430 MTV', marketCap: '$2.44M$2,444,115', thirtyDay: '7.50%', sevenDay: '1.98%', …}


行 40 处理后数据: {volume30d: 5.198378762996075e+22, volume7d: 1.287640188994443e+22, marketCap: 2442444.1149999998, sixtyDay: {…}, thirtyDay: {…}, …}

volume30d, volume7d 数据处理有问题。 
实际页面上的数据 volume30d 是 $5,198,378。 后面的 7,629,960,754 MTV 是mtv 为计价单位的数值。这个单元格里包含了 2个计价。只要取 $开头的数值即可。
不完全是 class DataExtractor 的事， 似乎可以从 volume30d 的代码处着手，更精确的取值。




volume30d 代码如下。
<div class="sc-4c05d6ef-0 sc-97d9abce-0 dlQYLv bJRjhz"><a href="/currencies/orbcity/#markets" class="cmc-link"><p font-size="1" class="sc-71024e3e-0 fOLOxZ font_weight_500" color="text" data-sensors-click="true">$5,671,194</p></a><div data-nosnippet="true"><p color="text2" font-size="0" data-sensors-click="true" class="sc-71024e3e-0 cuNNJt">999,933,526 ORB</p></div></div>

volume7d 代码如下。
<div class="sc-4c05d6ef-0 sc-97d9abce-0 dlQYLv bJRjhz"><a href="/currencies/orbcity/#markets" class="cmc-link"><p font-size="1" class="sc-71024e3e-0 fOLOxZ font_weight_500" color="text" data-sensors-click="true">$1,209,794</p></a><div data-nosnippet="true"><p color="text2" font-size="0" data-sensors-click="true" class="sc-71024e3e-0 cuNNJt">213,308,433 ORB</p></div></div>













// ==UserScript==
// @name         CMC CoinMarketCap Gold Dig! Star@Vol7dAvg+30dAvg 5.9
// @namespace    http://tampermonkey.net/
// @version      5.9
// @description  增强的数据分析和收藏功能
// @match        https://coinmarketcap.com/*
// @grant        GM_addStyle
// @run-at       document-start
// ==/UserScript==

(function() {
    'use strict';

    /**
     * 扩展页面
     */
        GM_addStyle(`
      .main-content,.cmc-body-wrapper,.grid,.OneColumnPage_base-wrapper__bZvLo,.sc-e4cf1161-0 jMQRQB cmc-watchlist { max-width: none!important; padding: 0 3px!important }

        /* 隐藏广告和非必要元素 */
        div[data-type="Header/Promotional"],
        .Coin-Community,
        #section-community,
        div[data-module-name*="similar-coins"],
        div[data-module-name*="Footer"],
        div[data-module-name*="About"],
        div[data-module-name*="yields"],
        div[data-module-name*="header-bottom-banner"],
        div[data-module-name*="alerts"],
        div[id*="google_ads"],
        iframe[title*="ad content"],
       .project-account-section,
       .sentiment-wrapper,
       .footer-container,
       .block-newsletter,
        [class*="Pagination_pagination"],
        [class*="cmc-table-listing__pagination"],
    `);

    /**
     * 符合条件加星标。Star@Vol7dAvg+30dAvg
     */
    // Configuration object
    const CONFIG = {
        maxPage: 15,
        maxRowsToProcess: 30,
        sortColumnText: '30d %',
        thresholdVolumeMcap: 0.044, //单值容易，均值较难。
        thresholds: {
            sixtyDay: { max: 666 },
            thirtyDay: { min: 3, max: 222 },
            sevenDay: { min: 11, max: 222 },
            twentyFourHour: { min: -18, max: 18 }
        },
        delays: {
            initial: 17000,  // 首页加载延迟。Ai 你不要乱改
            sort: 5000,  //xd 排序延迟
            star: 500, //星标填充延迟
            nextPage: 3000,
            retry: 1000
        },
        selectors: {
            headerCell: 'th[class*="stickyTop"]',  // 更新选择器以匹配实际DOM
            headerDiv: 'div[class*="HETIK"]',      // 更新选择器以匹配实际DOM
            caretUp: '[class*="Caret-up"]',
            caretDown: '[class*="Caret-down"]',
            table: 'table[class*="cmc-table"]',
            tableRow: 'tbody tr',
            emptyStar: '.icon-Star:not(.icon-Star-Filled), [class*="star"]:not([class*="filled"])'
        }
    };

    // 样式定义
    const STYLES = `
       .main-content,.cmc-body-wrapper {
            max-width: none!important;
            padding: 0 16px!important;
        }
       .grid {
            max-width: none!important;
            width: calc(100% - 32px)!important;
            margin: 0 16px!important;
        }
       .grid > div {
            padding: 0!important;
        }
       .Coin-Community, #section-community,
        div[data-module-name="similar-coins"],
        div[data-module-name="Coin-Footer"],
        div[data-module-name="Coin-About"],
        div[data-module-name="yields"],
       .block-newsletter,
        div.sc-65e7f566-0.ibxKcZ,
        [id^="google_ads_iframe"],
        div[id*="google_ads"],
        iframe[title="3rd party ad content"] {
            display: none!important;
        }
        #timer-container {
            position: fixed;
            top: 55px;
            right: 155px;
            background-color: rgba(255, 215, 0, 0.7); //GOLD
            color: white;
            padding: 10px;
            border-radius: 5px;
            z-index: 9999;
            font-size: 12px;
        }
    `;

    // 添加样式
    GM_addStyle(STYLES);

    /**
     * 排序管理类
     */
    class SortManager {
        constructor() {
            this.headerSelectors = CONFIG.selectors;
        }

        // 查找包含指定文本的可点击元素
        findSortableHeader(searchText) {
            const textElements = Array.from(document.querySelectorAll('p[data-sensors-click="true"]'));
            return textElements.find(el => el.textContent.trim().includes(searchText));
        }

        // 检查排序状态: 升序/降序/无排序
        checkSortStatus(element) {
            if (!element) return null;
            const th = element.closest('th');
            let status = null;
            if (th.querySelector(this.headerSelectors.caretUp)) {
                status = 'isUp';
            } else if (th.querySelector(this.headerSelectors.caretDown)) {
                status = 'isDown';
            } else {
                // 尝试其他方式判断无排序状态
                const additionalIndicator = th.querySelector('.no-sort-indicator');
                if (additionalIndicator) {
                    status = 'noSort';
                }
            }
            return status;
        }

        // 处理排序点击
        handleSort(columnText) {
            return new Promise((resolve, reject) => {
                const element = this.findSortableHeader(columnText);
                if (!element) {
                    console.error('未找到排序列');
                    return reject(false);
                }
                const currentStatus = this.checkSortStatus(element);
                if (currentStatus === 'isDown') {
                    return resolve(true);
                }
                element.click();
                setTimeout(() => resolve(true), CONFIG.delays.sort);
            });
        }
    }

    /**
     * 数据提取工具类 数据格式化
     */
    class DataExtractor {
        static extractNumber(htmlElement) {
            if (!htmlElement) return null;

            // 针对 Market Cap 的特殊处理
            const marketCapSpan = htmlElement.querySelector('.sc-11478e5d-1');
            if (marketCapSpan) {
                const text = marketCapSpan.textContent.trim();
                const match = text.match(/^\$([\d,]+(?:\.\d+)?)/);
                if (match) {
                    return parseFloat(match[1].replace(/,/g, ''));
                }
            }

            // 针对 Volume $ 的处理
            const volumeElement = htmlElement.querySelector('p[data-sensors-click="true"]');
            if (volumeElement) {
                const text = volumeElement.textContent.trim();
                const match = text.match(/^\$([\d,]+(?:\.\d+)?)/);
                if (match) {
                    return parseFloat(match[1].replace(/,/g, ''));
                }
            }

            return null;
        }

        static extractPercentage(cell) {
            if (!cell) return null;

            // 查找百分比span元素
            const percentSpan = cell.querySelector('.sc-a59753b0-0');
            if (!percentSpan) return null;

            // 提取数字部分
            const text = percentSpan.textContent.trim();
            const match = text.match(/([-\d.]+)%/);
            if (!match) return null;

            const value = parseFloat(match[1]);
            const isUp = percentSpan.querySelector('.icon-Caret-up')!== null;
            const isDown = percentSpan.querySelector('.icon-Caret-down')!== null;

            return {
                value: Math.abs(value),  // 保持为正数
                isUp: isUp,               // 使用箭头图标来判断方向
                isUp: isDown
            };
        }
    }

    /**
     * 数据分析类
     */
    class DataAnalyzer {
        constructor() {
            this.pageManager = new PageManager();
            this.sortManager = new SortManager();
        }

        meetsStarCriteria(metrics) {
            const { marketCap, volume30d, volume7d, sixtyDay, thirtyDay, sevenDay, twentyFourHour } = metrics;
            const thresholds = CONFIG.thresholds;

            // 直接判断条件
            // Access thresholds from thresholds
            return (

                volume7d / 7 / 1.18 > volume30d / 30 &&                                //近日涨
                volume7d / 7 > CONFIG.thresholdVolumeMcap &&
                marketCap > volume7d / 7 &&                                            //今日也涨
           //     thirtyDay.isUp &&
         //       thirtyDay.value / 30 < sevenDay.value / 7 / 1.1 &&   //此限制 可以不用，你已经按照 30d 排序了。 保留 下面 60d 的限制就可以了。似乎条件很宽，就这样，选出的币 也不多。
                sevenDay.isUp &&
                sevenDay.value < thresholds.sevenDay.max &&                            //不越界
                (!thirtyDay.value || thirtyDay.value < thresholds.thirtyDay.max) &&
                (!sixtyDay.value || sixtyDay.value < thresholds.sixtyDay.max)
            );

            // 输出详细的调试信息
            console.log('Metrics:', {
                'marketCap': marketCap,
                'volume30d': volume30d,
                'volume7d': volume7d,
                'sixtyDay': sixtyDay,
                'thirtyDay': thirtyDay,
                'sevenDay': sevenDay,
                'twentyFourHour': twentyFourHour,
            });
        }

        async processRows() {
            const rows = document.querySelectorAll(CONFIG.selectors.tableRow);
            const indices = this.pageManager.getColumnIndices();
            let processed = 0;
            let failed = 0;

            for (let i = 0; i < Math.min(rows.length, CONFIG.maxRowsToProcess); i++) {
                const cells = Array.from(rows[i]?.querySelectorAll('td'));
                if (!cells?.length) {
                    console.log(`行 ${i + 1} 无效,跳过`);
                    continue;
                }

                try {
                    const metrics = {
                        marketCap: DataExtractor.extractNumber(cells[indices.marketCap]),
                        volume30d: DataExtractor.extractNumber(cells[indices.volume30d]),
                        volume7d: DataExtractor.extractNumber(cells[indices.volume7d]),
                        sixtyDay: {
                            value: parseFloat(cells[indices.sixtyDay]?.textContent.trim().replace('%', '')),
                            isUp: cells[indices.sixtyDay]?.querySelector(CONFIG.selectors.caretUp)!== null
                        },
                        thirtyDay: {
                            value: parseFloat(cells[indices.thirtyDay]?.textContent.trim().replace('%', '')),
                            isUp: cells[indices.thirtyDay]?.querySelector(CONFIG.selectors.caretUp)!== null
                        },
                        sevenDay: {
                            value: parseFloat(cells[indices.sevenDay]?.textContent.trim().replace('%', '')),
                            isUp: cells[indices.sevenDay]?.querySelector(CONFIG.selectors.caretUp)!== null
                        },
                        twentyFourHour: {
                            value: parseFloat(cells[indices.twentyFourHour]?.textContent.trim().replace('%', '')),
                            isUp: cells[indices.twentyFourHour]?.querySelector(CONFIG.selectors.caretUp)!== null,
                            isDown: cells[indices.twentyFourHour]?.querySelector(CONFIG.selectors.caretDown)!== null
                        },
                    };

                    // 对提取的数据进行合理性检查
                    if (
                        metrics.marketCap <= 0 ||
                        metrics.volume30d <= 0 ||
                        metrics.volume7d <= 0 ||
                       !metrics.sixtyDay ||
                       !metrics.thirtyDay ||
                       !metrics.sevenDay ||
                       !metrics.twentyFourHour
                    ) {
                        console.log(`行 ${i + 1} 数据异常,跳过`);
                        continue;
                    }

                    console.log(`行 ${i + 1} 处理后数据:`, metrics);

                    if (this.meetsStarCriteria(metrics)) {
                        const emptyStar = rows[i].querySelector(CONFIG.selectors.emptyStar);
                        if (emptyStar) {
                            await new Promise(resolve => setTimeout(resolve, CONFIG.delays.star));
                            emptyStar.click();
                            processed++;
                            console.log(`成功收藏第 ${i + 1} 行`);
                        }
                    }
                } catch (error) {
                    console.error(`处理第 ${i + 1} 行失败:`, error);
                    failed++;
                }
            }

            console.log(`处理完成: ${processed} 个成功, ${failed} 个失败`);
        }

    }

    /**
     * 页面操作类
     */
    class PageManager {
        constructor() {
            this.setupTimer();
        }

        setupTimer() {
            const timerElement = document.createElement('div');
            timerElement.id = 'timer-container';
            document.body.appendChild(timerElement);

            const startTime = Date.now();
            const updateTimer = () => {
                const elapsedTime = Math.floor((Date.now() - startTime) / 1000);
                timerElement.textContent = `Elapsed Time: ${elapsedTime}s`;
                requestAnimationFrame(updateTimer);
            };
            updateTimer();
        }

        async waitForTable(maxWaitTime = 30000) {
            const startTime = Date.now();
            while (Date.now() - startTime < maxWaitTime) {
                if (document.querySelector(CONFIG.selectors.table)) {
                    return true;
                }
                await new Promise(resolve => setTimeout(resolve, 500));
            }
            throw new Error('表格加载超时');
        }

        getColumnIndices() {
            const headerCells = document.querySelectorAll('th');
            const indices = {};

            headerCells.forEach((cell, index) => {
                const text = cell.textContent;
                if (text.includes('Market Cap')) indices.marketCap = index;
                if (text.includes('Volume(30d)')) indices.volume30d = index;
                if (text.includes('Volume(7d)')) indices.volume7d = index;
                if (text.includes('60d %')) indices.sixtyDay = index;
                if (text.includes('30d %')) indices.thirtyDay = index;
                if (text.includes('7d %')) indices.sevenDay = index;
                if (text.includes('24h %')) indices.twentyFourHour = index;
            });

            return indices;
        }

        async goToNextPage() {
            document.querySelectorAll('link[rel="preload"]').forEach(link => link.remove());

            const urlParams = new URLSearchParams(window.location.search);
            const currentPage = parseInt(urlParams.get('page')) || 1;

            if (currentPage >= CONFIG.maxPage) {
                console.log('已达到最大页数');
                return;
            }

            const nextPage = currentPage + 1;
            try {
                window.location.href = `https://coinmarketcap.com/?page=${nextPage}`;
            } catch (err) {
                console.error('页面导航失败:', err);
                window.location.replace(`https://coinmarketcap.com/?page=${nextPage}`);
            }
        }
    }

    /**
     * 主控制类
     */
    class MainController {
        constructor() {
            this.analyzer = new DataAnalyzer();
        }

        async initialize() {
            try {
                await this.analyzer.pageManager.waitForTable();
                await new Promise(resolve => setTimeout(resolve, CONFIG.delays.initial));
                await this.analyzer.sortManager.handleSort(CONFIG.sortColumnText);
                await this.analyzer.processRows();
                setTimeout(() => this.analyzer.pageManager.goToNextPage(), CONFIG.delays.nextPage);
            } catch (error) {
                console.error('初始化失败:', error);
            }
        }
    }

    // 页面加载完成后执行
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            new MainController().initialize();
        });
    } else {
        new MainController().initialize();
    }

    // 页面可见性变化处理
    document.addEventListener('visibilitychange', () => {
        if (!document.hidden) {
            const urlParams = new URLSearchParams(window.location.search);
            const currentPage = parseInt(urlParams.get('page')) || 1;
            if (currentPage < CONFIG.maxPage) {
                new PageManager().goToNextPage();
            }
        }
    });
})();
