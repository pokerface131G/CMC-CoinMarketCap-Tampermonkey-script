主要流程是按顺序的。星标流程是 异步的。Volume/mcap 是有条件的。
去除页面加载监听，可加快处理速度。20 秒一个页面。。
Ai 编程，就是要会写需求。哈哈。。。
功能要求：逻辑要细致严密，不然因为你逻辑不好，所以 AI 的逻辑也不好。
脚本从page=2 开始， 避免冲突，在 首页 同时跑几个脚本。
增加一个页面显示的绿色计时器做提示。

30d 或 7d 排序的处理逻辑。页面加载10秒后，先点击 30d 或 7d , 再检查升序降序，若是降序，则跳过，若是升序，就再点击一次。
行数据的处理。点击 7d  并等待数据重排序后，取前10行的行数据进行下一步处理。
行的星标处理逻辑。30d % 列数据为正，且  > 11%。7d % 列数据为正，且  > 11%。 24h 列数据若为负，则需 > 22%, 若 24h 列数据为正，则忽略。VOLUME/MCAP > 0.07 。 若符合上述条件的行的 星标 为空，则点击它；若星标已填充，则跳过它，继续处理下一行。
Q: 7d 是否也要为正？
A: 暂时允许 7d 为负。短时间的波动大，尽量看长期波动。

以下这个版本，30d-avg 似乎已过时。不推荐。
=============================
// ==UserScript==
// @name         CMC CoinMarketCap Gold Dig！ Star-30d-avg！
// @namespace    http://tampermonkey.net/
// @version      3.1
// @description  1页耗时60秒。 仅从第二页开始选取！首页的其它操作太多了。30d 列 和 volume 列不一样了。没法通用了。
// @match        https://coinmarketcap.com/?page=*
// @grant        GM_addStyle
// @run-at       document-start
// ==/UserScript==

(function() {
    'use strict';

    // Configuration
    // 配置。 delays 数值，ai 你不要乱改啊。star 点的多了，服务器似乎就不让你点了。靠。只能手动点了。
    const CONFIG = {
        maxPage: 16,
        maxRowsToProcess: 33,
        sortColumnText: '30d %',
        volumeMcapThreshold: 0.033,
        maxSixtyDayThreshold: 666,
        minThirtyDayThreshold: 3,
        maxThirtyDayThreshold: 222,
        minSevenDayThreshold: 11,
        maxSevenDayThreshold: 222,
        minTwentyFourHourThreshold: -22,
        maxTwentyFourHourThreshold: 222,
        delays: {
            initial: 20000,
            Sort: 5000,
            Star: 500,
            nextPage: 6000,
            retryDelay: 1000
        }
    };

    let currentPage = 1;

    // 优化布局样式
    const customStyles = `
.main-content,.cmc-body-wrapper { max-width: none!important; padding: 0 16px!important; }
.grid { max-width: none!important; width: calc(100% - 32px)!important; margin: 0 16px!important; }
.grid > div { padding: 0!important; }
.Coin-Community, #section-community, div[data-module-name="similar-coins"], div[data-module-name="Coin-Footer"], div[data-module-name="Coin-About"], div[data-module-name="yields"],.block-newsletter, div.sc-65e7f566-0.ibxKcZ, [id^="google_ads_iframe"], div[id*="google_ads"], iframe[title="3rd party ad content"] { display: none!important; }
#timer-container { position: fixed; top: 55px; right: 95px; background-color: rgba(128, 128, 0, 0.7); color: white; padding: 10px; border-radius: 5px; z-index: 9999; font-size: 12px; }
    `;
    GM_addStyle(customStyles);

    // 棕色计时器提示
document.addEventListener('DOMContentLoaded', () => {
    const timerElement = document.createElement('div');
    timerElement.id = 'timer-container';
    timerElement.textContent = 'Elapsed Time: 0s';
    document.body.appendChild(timerElement);
    let startTime = Date.now();

    function updateTimer() {
        const elapsedTime = Math.floor((Date.now() - startTime) / 1000);
        timerElement.textContent = `Elapsed Time: ${elapsedTime}s`;
        requestAnimationFrame(updateTimer);
    }
    updateTimer();
});

    // 检查排序状态
    function checkXdSortStatus() {
        const XDayHeaders = document.querySelectorAll('p.sc-71024e3e-0.llNEXf');
        let XDayHeader = null;
        XDayHeaders.forEach(header => {
            if (header.textContent.includes(CONFIG.sortColumnText)) {
                XDayHeader = header;
            }
        });

        if (!XDayHeader) {
            console.log('Xd % header not found');
            return null;
        }

        const headerCell = XDayHeader.closest('div[role="columnheader"]');
        if (!headerCell) {
            console.log('Column header cell not found');
            return null;
        }

        const caretDown = headerCell.querySelector('.icon-Caret-down');
        const caretUp = headerCell.querySelector('.icon-Caret-up');

        if (caretDown) return 'down';
        else if (caretUp) return 'up';
        else return 'none';
    }

    async function clickAndCheckColumn() {
        await new Promise(resolve => setTimeout(resolve, CONFIG.delays.initial));
        const elements = document.querySelectorAll('p.sc-71024e3e-0.llNEXf');
        elements.forEach(element => {
            if (element.textContent === CONFIG.sortColumnText) {
                element.click();
            }
        });

        await new Promise(r => setTimeout(r, CONFIG.delays.Sort));
        let sortStatus = checkXdSortStatus();

        if (sortStatus === 'up') {
            elements.forEach(element => {
                if (element.textContent === CONFIG.sortColumnText) {
                    element.click();
                }
            });
            await new Promise(r => setTimeout(r, CONFIG.delays.Sort));
            sortStatus = checkXdSortStatus();
        }
    }

    // 改进的星标处理函数
    async function processStars(rows, volumeMcapIndex, sixtyDayIndex, thirtyDayIndex, sevenDayIndex, twentyFourHourIndex) {
        let processedCount = 0;
        let failedClickCount = 0;

        for (let index = 0; index < rows.length && index < CONFIG.maxRowsToProcess; index++) {
            const cells = rows[index].querySelectorAll('td');

            if (cells.length <= Math.max(volumeMcapIndex, sixtyDayIndex, thirtyDayIndex, sevenDayIndex, twentyFourHourIndex)) {
                continue;
            }

            // 数据获取
            const volumeMcapValue = parseFloat(cells[volumeMcapIndex].innerText.replace(/,/g, ''));
            const sixtyDayCaretUp = cells[sixtyDayIndex].querySelector('.icon-Caret-up');  // 新增：获取 60 天涨幅的箭头方向
            const sixtyDayValue = parseFloat(cells[sixtyDayIndex].innerText.replace('%', '').trim());  // 新增：获取 60 天涨幅的值
            const thirtyDayCaretUp = cells[thirtyDayIndex].querySelector('.icon-Caret-up');
            const thirtyDayValue = parseFloat(cells[thirtyDayIndex].innerText.replace('%', '').trim());
            const sevenDayCaretUp = cells[sevenDayIndex].querySelector('.icon-Caret-up');
            const sevenDayValue = parseFloat(cells[sevenDayIndex].innerText.replace('%', '').trim());

            // 处理星标
            const filledStar = rows[index].querySelector('.icon-Star-Filled');
            let emptyStar = null;

            // 多层次查找空星标
            const starElements = rows[index].querySelectorAll('.icon-Star');
            for (const star of starElements) {
                if (window.getComputedStyle(star).color === 'rgb(var(--color-light-neutral-4))' ||
                    star.style.color === 'var(--color-light-neutral-4)') {
                    emptyStar = star;
                    break;
                }
            }

            // 星标填充的逻辑。60d 涨幅在 666% 以内，且 30d 的一定涨幅范围内，且 30d 的平均涨幅 < 7d 的平均涨幅 的标的。 单看 30天涨幅<7天涨幅 似乎意义不大。24h 数据太少，偶然性大。
            // 当然可能有增长缓慢的案例。但是，30d 的平均涨幅 < 7d 的平均涨幅 还是很有参考意义。
            // 30d 的平均值 < 30d 阈值的平均值
            // 条件判断
            if (volumeMcapValue > CONFIG.volumeMcapThreshold &&
                sixtyDayCaretUp &&  // 新增：60 天涨幅箭头向上
                sixtyDayValue < CONFIG.maxSixtyDayThreshold &&  // 新增：60 天涨幅小于阈值
                thirtyDayCaretUp &&
                thirtyDayValue > CONFIG.minThirtyDayThreshold &&
                thirtyDayValue < CONFIG.maxThirtyDayThreshold &&
                thirtyDayCaretUp &&
                thirtyDayValue/(30*24) < sevenDayValue/(7*24) &&
                sevenDayCaretUp &&
                sevenDayValue > CONFIG.minSevenDayThreshold &&
                sevenDayValue < CONFIG.maxSevenDayThreshold &&
                emptyStar &&
                !filledStar) {

                try {
                    await new Promise(resolve => setTimeout(resolve, CONFIG.delays.Star));

                    // 直接点击尝试
                    emptyStar.click();

                    // 备用点击方法
                    if (!rows[index].querySelector('.icon-Star-Filled')) {
                        const event = new MouseEvent('click', {
                            view: window,
                            bubbles: true,
                            cancelable: true
                        });
                        emptyStar.dispatchEvent(event);
                    }

                    console.log(`Clicked star for row ${processedCount + 1}, name: ${cells[2].innerText}`);
                } catch (error) {
                    console.error(`Failed to click star for row ${processedCount + 1}`);
                    failedClickCount++;
                }
            }

            processedCount++;
        }

        console.log(`Star processing complete: processed ${processedCount} stars, ${failedClickCount} failed clicks`);
    }

    // 主流程
    async function main() {
        await clickAndCheckColumn();

        const headerCells = document.querySelectorAll('table.cmc-table thead th');
        let volumeMcapIndex = -1;
        let sixtyDayIndex = -1;
        let thirtyDayIndex = -1;
        let sevenDayIndex = -1;
        let twentyFourHourIndex = -1;

        headerCells.forEach((cell, index) => {
            const text = cell.innerText;
            if (text.includes('Volume / Mcap')) volumeMcapIndex = index;
            if (text.includes('60d %')) sixtyDayIndex = index;
            if (text.includes('30d %')) thirtyDayIndex = index;
            if (text.includes('7d %')) sevenDayIndex = index;
            if (text.includes('24h %')) twentyFourHourIndex = index;
        });

        const rows = document.querySelectorAll('table.cmc-table tbody tr');
        await processStars(rows, volumeMcapIndex, sixtyDayIndex, thirtyDayIndex, sevenDayIndex, twentyFourHourIndex);
        goToNextPage();
    }

    // 页面导航
// 下一页
function goToNextPage() {
    // 移除所有预加载的资源,避免警告
    document.querySelectorAll('link[rel="preload"]').forEach(link => link.remove());

    const urlParams = new URLSearchParams(window.location.search);
    const currentPage = parseInt(urlParams.get('page')) || 1;

    if(currentPage >= CONFIG.maxPage) {
        console.log('已达到最大页数');
        return;
    }

    // 使用更可靠的导航方式
    const nextPage = currentPage + 1;
    try {
        // 创建一个新的 a 标签进行导航
        const link = document.createElement('a');
        link.href = `https://coinmarketcap.com/?page=${nextPage}`;

        // 使用 history.pushState 更新 URL
        history.pushState({page: nextPage}, '', link.href);

        // 触发页面加载
        window.location.reload();
    } catch(err) {
        console.error('导航失败:', err);
        // 使用备用导航方式
        window.location.replace(`https://coinmarketcap.com/?page=${nextPage}`);
    }
}

// 添加页面可见性检测
document.addEventListener('visibilitychange', () => {
    if(!document.hidden) {
        // 页面变为可见时检查是否需要继续翻页
        const urlParams = new URLSearchParams(window.location.search);
        const currentPage = parseInt(urlParams.get('page')) || 1;
        if(currentPage < CONFIG.maxPage) {
            goToNextPage();
        }
    }
});

// 页面完全加载后执行
window.addEventListener('load', () => {
    // 给页面充分时间加载资源
    setTimeout(goToNextPage, CONFIG.delays.nextPage || 3000);
});
    main();
})();
